name: 'publish'

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            bundles: 'dmg'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            bundles: 'dmg'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
            bundles: 'appimage deb rpm'
          - platform: 'windows-latest'
            args: ''
            bundles: 'nsis'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
    
      - name: setup bun
        uses: oven-sh/setup-bun@v2

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: bun install # change this to npm, pnpm or yarn depending on which one you use.

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        shell: bash
        run: |
          set -euo pipefail

          # Determine version: prefer pushed tag (strip leading v), else package.json
          if [[ "${GITHUB_REF_TYPE:-}" == "tag" && -n "${GITHUB_REF_NAME:-}" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"

          # Extract lines after "## <version>" until the next "## "
          # Use sed instead of awk for better shell compatibility with bilingual content
          BODY=$(sed -n "/^## $VERSION$/,/^## /p" CHANGELOG.md | sed '$d' | tail -n +2)

          # Fallback: if not found, take the first section after the first "## "
          if [[ -z "$BODY" ]]; then
            BODY=$(sed -n '/^## /,/^## /p' CHANGELOG.md | head -n -1 | tail -n +2)
          fi

          # Create release body with title
          echo "Changes in v$VERSION" > /tmp/release_body.md
          echo "" >> /tmp/release_body.md
          echo "$BODY" >> /tmp/release_body.md

          # Use GitHub's built-in multiline syntax
          {
            echo "RELEASE_BODY<<EOF"
            cat /tmp/release_body.md
            echo "EOF"
          } >> "$GITHUB_ENV"

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'USANA Stock Manager v__VERSION__'
          releaseBody: ${{ env.RELEASE_BODY }}
          releaseDraft: false
          prerelease: true
          args: ${{ matrix.args }} --bundles ${{ matrix.bundles }}